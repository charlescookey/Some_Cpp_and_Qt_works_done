class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int idealSum = nums.size();
        int accSum =0;
        
        for(int i =0 ; i < nums.size() ; i++){
            idealSum += i;
            accSum += nums[i];
        }        
        return idealSum - accSum;        
    }
};

Here's a better way to calculate ideal sum 
int idealSum = nums.size() * (nums.size()+1) /2;

remember that 100 trick

1     2     3     4     5   ............ 97 98 99 100
100   99   98    97    96  ............. 4  3  2  1

the sum of all is 101 , so the sum of numbers from 1 to 100 = (101 * 100)/2

So we're summing 1 too the end to find the number that's missing. Another solution is to use XOR
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int result = nums.size();
        int i=0;
        
        for(int num:nums){
            result ^= num;
            result ^= i;
            i++;
        }
        
        return result;
    }
};
