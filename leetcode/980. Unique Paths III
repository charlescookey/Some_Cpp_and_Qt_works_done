class Solution {
public:
    int zeros;
    int r ;
    int c;
    int ans;
    int uniquePathsIII(vector<vector<int>>& grid) {
        zeros = howmany0s(grid);
        cout<<zeros<<"\n";
        ans =0;
        dfs(grid,r,c,-1);
        return ans;
    }
    
    void dfs(vector<vector<int>>& grid,  int row ,int col , int count){
        
        if(count > zeros)return;
        if(row >= grid.size() || col>= grid[0].size())return;
        if(row < 0 || col < 0)return;
        if(grid[row][col] == -1)return;
        if(grid[row][col] == -2)return;        
        
        if(grid[row][col] == 2){
            if(count == zeros)ans++;
            return;
        }
        
        grid[row][col] = -2;
        count++;
        
        dfs(grid , row+1 , col , count);
        dfs(grid , row-1 , col , count);
        dfs(grid , row , col+1 , count);
        dfs(grid , row , col-1 , count);
        
        grid[row][col] = 0;
    }
    
    int howmany0s(vector<vector<int>>& grid){
        int count=0;
        for(int i =0 ; i < grid.size() ; i++){
            for(int j =0 ; j< grid[0].size() ; j++){
                if(grid[i][j] == 0){
                    count++;
                }
                if(grid[i][j] == 1){
                    r = i;
                    c =j;
                }
            }
        }
        return count;
    }
};
