class Solution {
public:


    int shortestBridge(vector<vector<int>>& grid) {

        bool found = false;

        for(int i =0; i < grid.size() ;i++ ){
            for(int j =0; j < grid.size(); j++){
                if(grid[i][j] ==1){
                    findallconnections(grid , i ,j);
                    found = true;
                    break;
                }
            }
            if(found)break;
        } 

        int ans = INT_MAX;

        for(int level =2 ; ;level++){
            for(int i =0; i < grid.size() ;i++ ){
                for(int j =0; j < grid.size();j++){
                    if(grid[i][j] == level && expansion(grid , i , j , level))
                        return level-2;
                }
            }
        }   
        return ans;

    }

    bool expansion(vector<vector<int>>& grid , int i , int j ,  int level){
        return expand(grid , i ,j -1, level) || expand(grid , i-1 ,j , level) || expand(grid , i+1 ,j , level) || expand(grid , i ,j+1 , level);
    }

    bool expand(vector<vector<int>>& grid , int i , int j ,  int level){
        if(i < 0 || i >= grid.size())return false;
        if(j < 0 || j >= grid.size())return false;

        if(grid[i][j] == 0){grid[i][j] = level+1;}

        if((grid[i][j]) ==  1 )return true;
        return false;        
    }

    void findallconnections(vector<vector<int>>& grid , int i ,  int j ){
        if(i < 0 || i >= grid.size())return;
        if(j < 0 || j >= grid.size())return;

        if(grid[i][j]== 0)return;

        if(grid[i][j] > 1)return;

        grid[i][j] = 2;

        findallconnections(grid , i+1 , j );
        findallconnections(grid , i-1 , j );
        findallconnections(grid , i , j+1 );
        findallconnections(grid , i , j-1 );
    }    
};
