class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *temp = head;
        int size = 0;
        
        while(temp->next != nullptr){
            size++;
            temp = temp->next;
        }
        
        temp = head;
        size = size%2 == 0? size/2 : (size/2)+1;
        
        for(int i = 0 ; i < size ; i++){
            temp = temp->next;
        }
        
        return temp;
    }
};

another good idea i saw was 
Two Pointer Algortihm or Tortoise and Hare Algorithm :

    Initialize the two pointers slow and fast at the head of linked list .
    Now every time, slow moves 1 step at a time while fast is moves 2 steps at a time. When fast pointer arrives at the end, slow pointer will arrive right in the middle of our linked list.
    Now just return the value of slow pointer .
Really cool
