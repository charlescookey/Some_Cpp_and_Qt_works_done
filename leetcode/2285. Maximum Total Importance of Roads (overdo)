class Solution {
public:
    long long maximumImportance(int n, vector<vector<int>>& roads) {
        std::unordered_map<int, vector<int>> neighbours{};

        for(vector<int> i : roads){
            neighbours[i[0]].push_back(i[1]);
            neighbours[i[1]].push_back(i[0]);
        }

        vector<int> num(n);
        iota( num.begin(), num.end(), 0 );

        sort(num.begin() , num.end() , [&](int a , int b){
            if(neighbours[a].size() > neighbours[b].size())
                return true;
            if(neighbours[a].size() < neighbours[b].size())
                return false;

            int _a =0;
            int _b =0;

            for(int i : neighbours[a] ){
                _a += neighbours[i].size();
            }
            for(int i : neighbours[b] ){
                _b += neighbours[i].size();
            }

            return _a > _b;
        });

        std::unordered_map<int,int> pos{};

        for(int i = 0; i < n ; i++){
            pos[num[i]] = n-i;
        }

        long long ans = 0;

        for(vector<int> i : roads){
            ans += pos[i[0]];
            ans += pos[i[1]];
        } 

        return ans;       
    }
};
