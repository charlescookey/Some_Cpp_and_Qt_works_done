class Solution {
public:
    bool isValid(string s) {
        std::stack<char> ss{};
        
        if(s.size() % 2 != 0)return false;
        
        for(int i =0; i < s.size() ; i++){
            if(s[i] == '(' || s[i] == '{' || s[i] == '['){
                ss.push(s[i]);
            }else if(!ss.empty()){
                if(s[i] == ')'){
                    if(ss.top() == '('){
                        ss.pop();
                    }else return false;
                }
                
                if(s[i] == '}'){
                    if(ss.top() == '{'){
                        ss.pop();
                    }else return false;
                }
                
                if(s[i] == ']'){
                    if(ss.top() == '['){
                        ss.pop();
                    }else return false;
                }
            }else return false;
            
        }
        if(ss.empty())return true;
        return false;
    }
};



here's the same idea but more structured, lol

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for(auto i:s)
        {
            if(i=='(' or i=='{' or i=='[') st.push(i);
            else
            {
                if(st.empty() or (st.top()=='(' and i!=')') or (st.top()=='{' and i!='}') or (st.top()=='[' and i!=']')) return false;
                st.pop(); 
            }
        }
        return st.empty();
    }
};
