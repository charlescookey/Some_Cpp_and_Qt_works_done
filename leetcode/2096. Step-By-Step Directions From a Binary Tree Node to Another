/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        string start; 
        string dest;
        findOne(root, startValue, start);
        findOne(root, destValue,dest);

        cout<<start<<" "<<dest<<"\n";

        int l = 0;  int r =0;
        while(l < start.size() && r < dest.size()){
            if(start[l] != dest[r])break;
            l++;r++;
        }
        string ans{};

        for(int i = l ; i < start.size() ; i++ ){
            ans += "U";
        }

        for(int i =r ; i < dest.size() ; i++){
            ans += dest[i];
        }

        return ans;
    }

    bool findOne(TreeNode* root , int Value, string &ret){
        if(!root)return false;

        if(root->val == Value){
            return true;
        }

        ret += "L";
        if(findOne(root->left , Value , ret)){
            return true;
        };
        ret.pop_back();
        ret += "R";
        if(findOne(root->right , Value , ret)){
            return true;
        };
        ret.pop_back();
        return false;
    }
};
