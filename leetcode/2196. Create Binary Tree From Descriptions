/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        std::unordered_map<int , TreeNode*> hashmap{};
        std::unordered_set<int> isChild{};

        for(const vector<int> &a : descriptions){
            if(!hashmap.count(a[1])){
                hashmap[a[1]] = new TreeNode(a[1]);
            }

            if(!hashmap.count(a[0])){
                hashmap[a[0]] = new TreeNode(a[0]);;
            }

            if(a[2])
            hashmap[a[0]]->left = hashmap[a[1]];
            else 
            hashmap[a[0]]->right = hashmap[a[1]];

            isChild.insert(a[1]);
        }

        for(const vector<int> &a : descriptions){
            if(!isChild.count(a[0]))return hashmap[a[0]];
        } 
        return nullptr;       
    }
};
