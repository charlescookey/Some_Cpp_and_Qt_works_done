/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    std::unordered_set<int> Todelete{};
    vector<TreeNode*> ans;
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        Todelete = unordered_set<int>(to_delete.begin() , to_delete.end());
        dfs(root , true);
        return ans;
    }

    bool dfs(TreeNode* curr , bool noParent){
        if(!curr)return false;

        bool inside = Todelete.count(curr->val);

        if(dfs(curr->left , inside))curr->left = nullptr;

        if(dfs(curr->right , inside))curr->right = nullptr;

        if(inside)return true;

        if(noParent){
            ans.push_back(curr);
        }
        return false;
    }
};
