/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        //map<TreeNode* , int>p_level{};
        //map<TreeNode* , int>q_level{};
        
        vector<TreeNode*> p_frontier;
        vector<TreeNode*> q_frontier;
        
        q_frontier.push_back(q);
        p_frontier.push_back(p);
        
        
        
        while(!q_frontier.empty() && !p_frontier.empty()){
            vector<TreeNode*> p_next;
            vector<TreeNode*> q_next;
            
            for(int i =0 ; i < q_frontier.size() ;i++ ){
                if(q_frontier[i] && p_frontier[i]){
                    if(q_frontier[i]->val == p_frontier[i]->val){
                        p_next.push_back(p_frontier[i]->right);
                        q_next.push_back(q_frontier[i]->right);
                        p_next.push_back(p_frontier[i]->left);
                        q_next.push_back(q_frontier[i]->left);
                    }else{
                        return false;
                    }
                }else{
                    if(q_frontier[i] || p_frontier[i])return false;
                }
                q_frontier = q_next;
                p_frontier = p_next;
            }       
        }   
        return true;
    }
};
