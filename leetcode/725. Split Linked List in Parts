/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> ans(k);
        int count =0;
        ListNode* temp = head;
        ListNode* prev = nullptr;
        while(temp){
            count++;
            temp = temp->next;
        }
        int size = max(1 , count/k);
        int rem = k>count? 0 : count%k;
        temp = head;
        int index=0; 
        count =0;
        ans[0] = head;

        while(temp){
            if(count == size + min(rem , 1)){
                count =0;
                ans[++index] = temp;
                rem = max(rem-1,0);
                prev->next = nullptr;                
            }
            prev = temp;
            temp = temp->next;
            count++;
        }
        return ans;        
    }
};
