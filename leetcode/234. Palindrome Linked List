/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {

        //loop through using fast and slow to find the middle
        ListNode* slow  = head;
        ListNode* fast = head;

        while(fast != nullptr && fast->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }

        if(fast != nullptr && fast->next == nullptr){
            slow = slow->next;
        }

        //reverse from midway to end

        ListNode* curr = slow;
        ListNode* prev  = nullptr;
        ListNode* next = nullptr;

        while(curr != nullptr && curr->next != nullptr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        if(curr != nullptr){
            curr->next = prev;
        }

        

        while(head!= nullptr && curr != nullptr){
            if(head->val != curr->val)return false;
            head = head->next;
            curr = curr->next;
        }
        return true;
    }
};
