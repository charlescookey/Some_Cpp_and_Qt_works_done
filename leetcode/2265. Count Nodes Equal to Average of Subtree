/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans =0;
    int averageOfSubtree(TreeNode* root) {
        recurse(root);
        return ans;
    }

    std::pair<int, int> recurse(TreeNode* root){
        if(!root)return {0,0};

        int totalcount =0 ;
        int sum =0;
        std::pair<int, int> thePair;

        if(root->left){
            thePair = recurse(root->left);
            sum += thePair.first;
            totalcount += thePair.second;
        }
        if(root->right){
            thePair = recurse(root->right);
            sum += thePair.first;
            totalcount += thePair.second;
        }

        totalcount++;
        sum += root->val;

        int avg = sum/totalcount;
        //cout<<avg<<" "<<root->val<<" "<<sum<<" "<<totalcount<<"\n";

        if(avg == root->val)ans ++;
        return {sum , totalcount};
    }
};
