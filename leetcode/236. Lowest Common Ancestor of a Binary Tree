/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    std::map<TreeNode* , TreeNode*> parents;
    std::map<int, int>pParents;
    int ans =INT_MAX;
    TreeNode* _ans = nullptr;
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        dfs(root, nullptr);
        pushParent(p ,0);

        traverseQPArents(q);
        return _ans;
    }

    void traverseQPArents(TreeNode* curr ){
        if(curr == nullptr)return;

        if(pParents.count(curr->val)){
            if(pParents[curr->val] < ans){
                ans = pParents[curr->val];
                _ans = curr;
            };
        }
        traverseQPArents(parents[curr] );
    }

    void pushParent(TreeNode* curr , int level){
        if(curr == nullptr)return;

        pParents[curr->val] = level;
        pushParent(parents[curr] , level+1);
    }

    void dfs(TreeNode* curr , TreeNode* parent){
        if(curr == nullptr)return;
        parents[curr] = parent;
        dfs(curr->left , curr);
        dfs(curr ->right , curr);
    }
};



a better solution was on the discuss

class Solution {

    private TreeNode ans;

    public Solution() {
        // Variable to store LCA node.
        this.ans = null;
    }

    private boolean recurseTree(TreeNode currentNode, TreeNode p, TreeNode q) {

        // If reached the end of a branch, return false.
        if (currentNode == null) {
            return false;
        }

        // Left Recursion. If left recursion returns true, set left = 1 else 0
        int left = this.recurseTree(currentNode.left, p, q) ? 1 : 0;

        // Right Recursion
        int right = this.recurseTree(currentNode.right, p, q) ? 1 : 0;

        // If the current node is one of p or q
        int mid = (currentNode == p || currentNode == q) ? 1 : 0;


        // If any two of the flags left, right or mid become True
        if (mid + left + right >= 2) {
            this.ans = currentNode;
        }

        // Return true if any one of the three bool values is True.
        return (mid + left + right > 0);
    }

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Traverse the tree
        this.recurseTree(root, p, q);
        return this.ans;
    }
}
