The first soolution is ideal, as we can onnly use one queue
The idea is for a push, we reverse by puching the front to the back,  till the just pushed element is at the front, the way the list is reversed
and it is like a stack as pop and front will be o(1)

class MyStack {   
    queue<int> q1;
public:
    MyStack() {
        q1 = queue<int>();
    }
    
    void push(int x) {
        int size = q1.size();
        q1.push(x);
        
        for(int i =0 ; i < size ; i++){
            q1.push(q1.front());
            q1.pop();
        }       
    }
    
    int pop() {
        int a =q1.front();
        q1.pop();
        return a;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        return q1.empty();        
    }
};


This was the original idea, whhere push  is basic, but  pop, we have to push all the llement from tthe first queue to the second, till we have one left, thats what we return
thhen we make the first what is in the second, i technically cheated as i used an extra vvariable so i don't  have to repeat the code for pop in front lol

class MyStack {
    
    queue<int> q1;
    queue<int> q2;
    int lastpush = -1;
public:
    MyStack() {
        q1 = queue<int>();
        q2 = queue<int>();
    }
    
    void push(int x) {
        lastpush =  x;
        q1.push(x);
    }
    
    int pop() {
        while(!q1.empty()){
            if(q1.size() == 1){
                break;
            }
            lastpush = q1.front();
            q2.push(q1.front());
            q1.pop();
        }
        int ans = q1.front();
        q1 = q2;
        q2 = queue<int>();
        return ans;
    }
    
    int top() {
        return lastpush;
    }
    
    bool empty() {
        return q1.empty();        
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
