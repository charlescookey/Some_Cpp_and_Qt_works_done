class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        std::sort(nums.begin(), nums.end());

        vector<vector<int>> ans{{nums[0]}};
        int currRow = 0;

        for(int i = 1 ;  i < nums.size() ; i++){
            if(nums[i] == nums[i-1])
                currRow++;
            else
                currRow = 0;
            
            if(currRow >= ans.size())
                ans.push_back({nums[i]});
            else
                ans[currRow].push_back(nums[i]);
        }
        return ans;
        
    }
    vector<vector<int>> findMatrix(vector<int>& nums) {
        std::unordered_map<int, int> hashmap{};

        for(int i:nums){
            hashmap[i]++;
        }

        vector<vector<int>> ans{};


        for(auto [key , value]: hashmap){
            cout<<key<<" "<<value<<"\n";
            for(int i =0 ;i < value ; i++){
                if(i >= ans.size()){
                    ans.push_back({key});
                }else{
                    ans[i].push_back(key);
                }
            }

        }
        return ans;
        
    }
};
