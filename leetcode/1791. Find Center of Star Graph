class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {
        std::map<int , int> hashmap{};
        
        for(auto a: edges)
            for(auto b:a)
                hashmap[b]++;
        
        for(auto a : hashmap){
            if(a.second == hashmap.size() -1){
                return a.first;
            }
        }
        
        return 0;        
    }
};



cool solution I saw
Solution-II (Optimized Simpler Approach)

We can notice that the center node has to appear in every edge. This mean the node that appears in both edge[0] and edge[1] will be the center node. This is much better that direct implementation. The below solution is based on that -

int findCenter(vector<vector<int>>& edges) {
    // if first node of edge-0 occurs in edge-1 as well, it's the center one
	if(edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1])
		return edges[0][0];
	// otherwise, the second node of edge-0 will be center node for sure
   return edges[0][1];
}

Time Complexity : O(1)
Space Complexity : O(1)

One-Liner

The above same solution as 1-liner below :

int findCenter(vector<vector<int>>& edges) {
	return (edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]) ? edges[0][0] : edges[0][1];    
}
