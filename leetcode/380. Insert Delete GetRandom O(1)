class RandomizedSet {
    std::unordered_map<int , int> Keys{};
    vector<int> vec{};
    int size =0;


public:
    RandomizedSet() {
        Keys =  unordered_map<int , int>();
        vec = vector<int>();
        size =0;
    }
    
    bool insert(int val) {
        if(Keys.find(val) != Keys.end() ){
            return false;
        }
        Keys[val] = size;
        vec.push_back(val);
        size++;
        return true;
    }
    
    bool remove(int val) {
        auto a = Keys.find(val);
        if(a == Keys.end() ){
            return false;
        }

        int index = Keys[val];
        std::swap(vec[index] , vec[vec.size() -1]);
        Keys[vec[index]] = index;
        vec.pop_back();
        Keys.erase(val);
        size--;
        return true;
    }
    
    int getRandom() {
        return vec[rand() % size];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
