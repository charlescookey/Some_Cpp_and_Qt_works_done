class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for(int &a : nums){
            a*=a;
        }
        std::sort(nums.begin() , nums.end());
        return nums;
    }
};

O(N) solution

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> ans{};
        int l =0;
        int r = nums.size() -1;
        while(l<=r){
            if(std::abs(nums[l]) > std::abs(nums[r])){
                ans.push_back(std::pow(nums[l] , 2));
                l++;
            }else{
                ans.push_back(std::pow(nums[r] , 2));
                r--;
            }
            
        }
        std::reverse(ans.begin() , ans.end());
        return ans;
        
    }
};

Better condensed
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> res(A.size());
        int l = 0, r = A.size() - 1;
        for (int k = A.size() - 1; k >= 0; k--) {
            if (abs(A[r]) > abs(A[l])) res[k] = A[r] * A[r--];
            else res[k] = A[l] * A[l++];
        }
        return res;
    }
};
