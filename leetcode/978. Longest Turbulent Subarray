class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        int currSign  = 0;
        int lastSign = 2;

        int ans = 1;
        int count =1;

        for(int i =1; i < arr.size() ; i++){
            if(arr[i] > arr[i-1]){
                currSign = 0;
            }else if(arr[i] < arr[i-1]){
                currSign = 1;
            }else{
                currSign =2;
                count =1;
                continue;
            }            

            if(lastSign !=  currSign ){
                count++;
            }else{
                count =2;
                lastSign =2;
            }

            ans = max(count , ans);
            lastSign = currSign;   
        }
        return ans;
    }
};


Mine wasn;t the best looking, here's a wayyyy better one and cleaner

class Solution {
    public int maxTurbulenceSize(int[] A) {
        int inc = 1, dec = 1, result = 1;
        for (int i = 1; i < A.length; i++) {
            if (A[i] < A[i - 1]) {
                dec = inc + 1;
                inc = 1;
            } else if (A[i] > A[i - 1]) {
                inc = dec + 1;
                dec = 1;
            } else {
                inc = 1;
                dec = 1;
            }
            result = Math.max(result, Math.max(dec, inc));
        }
        return result;
    }
}
