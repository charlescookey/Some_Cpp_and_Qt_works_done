/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        vector<TreeNode*> frontier;
        vector<TreeNode*> next;

        frontier.push_back(root);
        int level = 0;
        int temp =0;
        int last_element = 0;

        while(!frontier.empty()){
            next.clear();
            for(TreeNode* curr : frontier){
                temp = curr->val;
                if(level % 2 == 0){
                    if(temp%2 == 0 || temp <= last_element)
                        return false;
                }else{
                    if(temp%2 == 1 || temp>= last_element)
                        return false;
                }
                last_element = temp;

                if(curr->left)next.push_back(curr->left);
                if(curr->right)next.push_back(curr->right);
            }
            frontier = next;
            level++;
            if(level % 2 == 0)last_element = 0;
            else last_element = INT_MAX;
        }
        return true;        
    }
};



PS, using a queue and popping elements after getting it, seems like a  faster way to BFS
