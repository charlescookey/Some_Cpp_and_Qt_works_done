class Solution {
public:
    map<pair<int , int> , bool> visited{};
    vector<vector<int>> image;
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int ans =0;
        image = grid;
        for(int i=0 ; i < grid.size() ; i++){
            for(int j = 0 ; j < grid[0].size() ; j++){
                if(grid[i][j] == 0)continue;
                int temp =0;
                DFS_visit( i ,j , temp);
                ans = std::max(temp , ans);   
            }
        }
        return ans;
        
    }
    
    void  DFS_visit(int sr, int sc,int& ans){
        if(sr < 0 || sr >= image.size())return;
        if(sc < 0 || sc >= image[0].size())return;
        if(visited.count({sr , sc}) >0)return;
        if(image[sr][sc] == 0)return;
        
        visited[{sr , sc}] = true;
        ans++;
        
        DFS_visit( sr-1 ,sc , ans );
        DFS_visit( sr+1 ,sc , ans );
        DFS_visit( sr ,sc-1 , ans );
        DFS_visit( sr ,sc+1 , ans );   
    }
};
