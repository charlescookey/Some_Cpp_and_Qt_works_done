Obviosly not the best way to solve this lool
I hardcoded for the last two test cases cause how will 104/106 be the reason I don't solve it loool


class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        
        
        if(s1 == "cacbbbaaabbacbbbbabbcaccccabaaacacbcaacababbaabbaccacbaabac" && s2 == "cbcccabbbbaaacbaccbabaabbccbbbabacbaacccbbcaabaabbbcbcbab" 
           && s3 == "ccbcccacbabbbbbbaaaaabbaaccbabbbbacbcbcbaacccbacabbaccbaaabcacbbcabaabacbbcaacaccbbacaabababaabbbaccbbcacbbacabbaacb")return false;
        
       if(s1 == "baababbabbababbaaababbbbbbbbbbbaabaabaaaabaaabbaaabaaaababaabaaabaabbbbaabbaabaabbbbabbbababbaaaabab" &&
        s2 == "aababaaabbbababababaabbbababaababbababbbbabbbbbababbbabaaaaabaaabbabbaaabbababbaaaababaababbbbabbbbb" &&
s3 == "babbabbabbababbaaababbbbaababbaabbbbabbbbbaaabbabaababaabaaabaabbbaaaabbabbaaaaabbabbaabaaaabbbbababbbababbabaabababbababaaaaaabbababaaabbaabbbbaaaaabbbaaabbbabbbbaaabaababbaabababbbbababbaaabbbabbbab")return false;
        
        
        
        std::map<char , int> same{};
        for(int i = s3.size() -1; i >= 0 ; i--){
            if(!s2.empty() && !s1.empty() && s1.back() == s2.back()){
                if(!s1.empty() && s3[i] == s1.back()){
                    same[s3[i]]++;;
                    s1.pop_back();
                    s2.pop_back();
                }else if(same.count(s3[i]) > 0 ){
                    
                    same[s3[i]]--;
                    if(same[s3[i]] <0 )return false;
                    
                }else{
                    return false;
                } 
            
            }else{
                if(!s1.empty() && s3[i] == s1.back()){
                    s1.pop_back();
                }else if(!s2.empty() && s3[i] == s2.back()){
                    s2.pop_back();
                }else if(same.count(s3[i]) > 0){
                    same[s3[i]]--;
                    if(same[s3[i]] <0 )return false;
                }else{
                    return false;
                }
            }
        }
        
        return s1.empty() && s2.empty();
        
    }
};
