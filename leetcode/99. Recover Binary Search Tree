/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    TreeNode *first = nullptr, *second = nullptr , *prev = nullptr;
    void recoverTree(TreeNode* root) {
        inorder(root);
        std::swap(first->val , second->val);
    }
    
    void inorder(TreeNode* curr){
        if(!curr)return;
        
        inorder(curr->left);
        
        if(prev && prev->val > curr->val){
            if(!first){
                first = prev; 
            }
            second = curr;
        }
        
        prev = curr;
        
        inorder(curr->right);
    }
};

//in order gives the bst in a sorted output so we just check if the prev is greater than the curr, that's where the error  lies and thats what we'd swap
