/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string ans;

    string smallestFromLeaf(TreeNode* root) {
        ans = "";
        dfs(root, "");
        return ans;
    }

    void dfs(TreeNode* curr, string temp){
        if(curr == nullptr){
            return;
        }

        temp = char(curr->val + 97) + temp;

        dfs(curr->right , temp);
        dfs(curr->left , temp);

        if(curr->left == nullptr && curr->right == nullptr){
            checkans(temp);
        }
    }

    void checkans(string curr){
        if(ans == ""){
            ans = curr;
            return;
        }
        int size = std::min(curr.size() , ans.size());

        for(int i =0; i < size ; i++){
            if(ans[i] == curr[i]){
                continue;
            }else if(ans[i] > curr[i]){
                ans = curr;
                return;
            }else{
                return;
            }
        }

        if(size != ans.size()){
            ans = curr;
            return;
        }
    }
};
